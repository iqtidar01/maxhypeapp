{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { Fragment, useCallback, useMemo, useState } from 'react';\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Menu, TouchableRipple, useTheme, TextInput, Divider, HelperText } from 'react-native-paper';\n\nfunction InputSelect(props) {\n  var _formState$errors, _formState$errors$fie, _options$find;\n\n  var formState = props.formState,\n      field = props.field,\n      textInputProps = props.textInputProps,\n      options = props.options,\n      CustomTextInput = props.CustomTextInput,\n      _props$onDismiss = props.onDismiss,\n      onDismiss = _props$onDismiss === void 0 ? function () {} : _props$onDismiss;\n  var theme = useTheme();\n  var errorMessage = (_formState$errors = formState.errors) == null ? void 0 : (_formState$errors$fie = _formState$errors[field.name]) == null ? void 0 : _formState$errors$fie.message;\n  var textColor = errorMessage ? theme.colors.error : theme.colors.text;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      visible = _useState2[0],\n      setVisible = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      width = _useState4[0],\n      setWidth = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      height = _useState6[0],\n      setHeight = _useState6[1];\n\n  var INPUT = CustomTextInput != null ? CustomTextInput : TextInput;\n  var styles = useMemo(function () {\n    return StyleSheet.create({\n      textInputStyle: {\n        color: textColor\n      },\n      menuStyle: {\n        minWidth: width,\n        width: width,\n        marginTop: height\n      }\n    });\n  }, [height, textColor, theme.colors.onSurface, theme.colors.surface, width]);\n  var onLayout = useCallback(function (event) {\n    var _event$nativeEvent$la = event.nativeEvent.layout,\n        _width = _event$nativeEvent$la.width,\n        _height = _event$nativeEvent$la.height;\n    setWidth(_width);\n    setHeight(_height);\n  }, []);\n  return React.createElement(Fragment, null, React.createElement(Menu, {\n    visible: visible,\n    onDismiss: function onDismiss() {\n      return setVisible(false);\n    },\n    style: styles.menuStyle,\n    anchor: React.createElement(TouchableRipple, {\n      onPress: function onPress() {\n        Keyboard.dismiss();\n        setVisible(true);\n      }\n    }, React.createElement(View, {\n      pointerEvents: 'none',\n      onLayout: onLayout\n    }, React.createElement(INPUT, _extends({\n      ref: field.ref,\n      mode: 'outlined',\n      error: errorMessage ? true : false\n    }, textInputProps, {\n      value: (_options$find = options.find(function (_ref) {\n        var value = _ref.value;\n        return \"\" + value === \"\" + field.value;\n      })) == null ? void 0 : _options$find.label,\n      onFocus: function onFocus() {\n        Keyboard.dismiss();\n        setVisible(true);\n      },\n      style: [styles.textInputStyle, textInputProps == null ? void 0 : textInputProps.style]\n    }))))\n  }, options.map(function (_ref2, _index) {\n    var _label = _ref2.label,\n        _value = _ref2.value;\n    return React.createElement(Fragment, {\n      key: _value\n    }, React.createElement(Menu.Item, {\n      title: _label,\n      style: {\n        width: width,\n        minWidth: width,\n        maxWidth: width\n      },\n      onPress: function onPress() {\n        field.onChange(\"\" + _value);\n        setVisible(false);\n        !!onDismiss && onDismiss();\n      },\n      titleStyle: {\n        color: \"\" + _value === \"\" + field.value ? theme.colors.primary : theme.colors.text\n      }\n    }), _index < options.length - 1 && React.createElement(Divider, null));\n  })), errorMessage && React.createElement(HelperText, {\n    type: 'error'\n  }, errorMessage));\n}\n\nexport default InputSelect;","map":{"version":3,"sources":["A:/Office Work/maxhypeapp/node_modules/react-native-paper-form-builder/dist/Inputs/InputSelect.js"],"names":["React","Fragment","useCallback","useMemo","useState","Menu","TouchableRipple","useTheme","TextInput","Divider","HelperText","InputSelect","props","formState","field","textInputProps","options","CustomTextInput","onDismiss","theme","errorMessage","errors","name","message","textColor","colors","error","text","visible","setVisible","width","setWidth","height","setHeight","INPUT","styles","StyleSheet","create","textInputStyle","color","menuStyle","minWidth","marginTop","onSurface","surface","onLayout","event","nativeEvent","layout","_width","_height","Keyboard","dismiss","ref","find","value","label","style","map","_index","_label","_value","maxWidth","onChange","primary","length"],"mappings":"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","sourcesContent":["import React, { Fragment, useCallback, useMemo, useState } from 'react';\nimport { Keyboard, StyleSheet, View } from 'react-native';\nimport { Menu, TouchableRipple, useTheme, TextInput, Divider, HelperText, } from 'react-native-paper';\nfunction InputSelect(props) {\n    const { formState, field, textInputProps, options, CustomTextInput, onDismiss = () => { }, } = props;\n    const theme = useTheme();\n    const errorMessage = formState.errors?.[field.name]?.message;\n    const textColor = errorMessage ? theme.colors.error : theme.colors.text;\n    const [visible, setVisible] = useState(false);\n    const [width, setWidth] = useState(0);\n    const [height, setHeight] = useState(0);\n    const INPUT = CustomTextInput ?? TextInput;\n    const styles = useMemo(() => StyleSheet.create({\n        textInputStyle: {\n            color: textColor,\n        },\n        menuStyle: {\n            minWidth: width,\n            width: width,\n            marginTop: height,\n        },\n    }), [height, textColor, theme.colors.onSurface, theme.colors.surface, width]);\n    const onLayout = useCallback((event) => {\n        const { width: _width, height: _height } = event.nativeEvent.layout;\n        setWidth(_width);\n        setHeight(_height);\n    }, []);\n    return (<Fragment>\n      <Menu visible={visible} onDismiss={() => setVisible(false)} style={styles.menuStyle} anchor={<TouchableRipple onPress={() => {\n                Keyboard.dismiss();\n                setVisible(true);\n            }}>\n            <View pointerEvents={'none'} onLayout={onLayout}>\n              <INPUT ref={field.ref} mode={'outlined'} error={errorMessage ? true : false} {...textInputProps} value={options.find(({ value }) => `${value}` === `${field.value}`)\n                ?.label} onFocus={() => {\n                Keyboard.dismiss();\n                setVisible(true);\n            }} style={[styles.textInputStyle, textInputProps?.style]}/>\n            </View>\n          </TouchableRipple>}>\n        {options.map(({ label: _label, value: _value }, _index) => {\n            return (<Fragment key={_value}>\n              <Menu.Item title={_label} style={{ width, minWidth: width, maxWidth: width }} onPress={() => {\n                    field.onChange(`${_value}`);\n                    setVisible(false);\n                    !!onDismiss && onDismiss();\n                }} titleStyle={{\n                    color: `${_value}` === `${field.value}`\n                        ? theme.colors.primary\n                        : theme.colors.text,\n                }}/>\n              {_index < options.length - 1 && <Divider />}\n            </Fragment>);\n        })}\n      </Menu>\n      {errorMessage && <HelperText type={'error'}>{errorMessage}</HelperText>}\n    </Fragment>);\n}\nexport default InputSelect;\n"]},"metadata":{},"sourceType":"module"}