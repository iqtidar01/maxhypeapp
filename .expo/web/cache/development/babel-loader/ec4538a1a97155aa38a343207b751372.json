{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport React, { Fragment, useMemo } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { HelperText, TextInput, useTheme } from 'react-native-paper';\n\nfunction InputText(props) {\n  var _formState$errors, _formState$errors$fie;\n\n  var formState = props.formState,\n      field = props.field,\n      textInputProps = props.textInputProps,\n      CustomTextInput = props.CustomTextInput;\n  var theme = useTheme();\n  var errorMessage = (_formState$errors = formState.errors) == null ? void 0 : (_formState$errors$fie = _formState$errors[field.name]) == null ? void 0 : _formState$errors$fie.message;\n  var textColor = errorMessage ? theme.colors.error : theme.colors.text;\n  var INPUT = CustomTextInput != null ? CustomTextInput : TextInput;\n  var styles = useMemo(function () {\n    return StyleSheet.create({\n      textInputStyle: {\n        color: textColor\n      }\n    });\n  }, [textColor]);\n  return React.createElement(Fragment, null, React.createElement(INPUT, _extends({\n    mode: 'outlined',\n    error: errorMessage ? true : false\n  }, textInputProps, {\n    ref: field.ref,\n    value: field.value,\n    onChangeText: function onChangeText(text) {\n      return field.onChange(text);\n    },\n    style: [styles.textInputStyle, textInputProps == null ? void 0 : textInputProps.style]\n  })), errorMessage && React.createElement(HelperText, {\n    type: 'error'\n  }, errorMessage));\n}\n\nexport default InputText;","map":{"version":3,"sources":["A:/Office Work/maxhype/maxhypeapp/node_modules/react-native-paper-form-builder/dist/Inputs/InputText.js"],"names":["React","Fragment","useMemo","HelperText","TextInput","useTheme","InputText","props","formState","field","textInputProps","CustomTextInput","theme","errorMessage","errors","name","message","textColor","colors","error","text","INPUT","styles","StyleSheet","create","textInputStyle","color","ref","value","onChange","style"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,OAA1B,QAAyC,OAAzC;;AAEA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,QAAhC,QAAgD,oBAAhD;;AACA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAA;;AACtB,MAAQC,SAAR,GAA8DD,KAA9D,CAAQC,SAAR;AAAA,MAAmBC,KAAnB,GAA8DF,KAA9D,CAAmBE,KAAnB;AAAA,MAA0BC,cAA1B,GAA8DH,KAA9D,CAA0BG,cAA1B;AAAA,MAA0CC,eAA1C,GAA8DJ,KAA9D,CAA0CI,eAA1C;AACA,MAAMC,KAAK,GAAGP,QAAQ,EAAtB;AACA,MAAMQ,YAAY,wBAAGL,SAAS,CAACM,MAAb,8CAAG,kBAAmBL,KAAK,CAACM,IAAzB,CAAH,qBAAG,sBAAgCC,OAArD;AACA,MAAMC,SAAS,GAAGJ,YAAY,GAAGD,KAAK,CAACM,MAAN,CAAaC,KAAhB,GAAwBP,KAAK,CAACM,MAAN,CAAaE,IAAnE;AACA,MAAMC,KAAK,GAAGV,eAAH,WAAGA,eAAH,GAAsBP,SAAjC;AACA,MAAMkB,MAAM,GAAGpB,OAAO,CAAC;AAAA,WAAMqB,UAAU,CAACC,MAAX,CAAkB;AAC3CC,MAAAA,cAAc,EAAE;AACZC,QAAAA,KAAK,EAAET;AADK;AAD2B,KAAlB,CAAN;AAAA,GAAD,EAIlB,CAACA,SAAD,CAJkB,CAAtB;AAKA,SAAQ,oBAAC,QAAD,QACN,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAE,UAAb;AAAyB,IAAA,KAAK,EAAEJ,YAAY,GAAG,IAAH,GAAU;AAAtD,KAAiEH,cAAjE;AAAiF,IAAA,GAAG,EAAED,KAAK,CAACkB,GAA5F;AAAiG,IAAA,KAAK,EAAElB,KAAK,CAACmB,KAA9G;AAAqH,IAAA,YAAY,EAAE,sBAACR,IAAD;AAAA,aAAUX,KAAK,CAACoB,QAAN,CAAeT,IAAf,CAAV;AAAA,KAAnI;AAAmK,IAAA,KAAK,EAAE,CAACE,MAAM,CAACG,cAAR,EAAwBf,cAAxB,oBAAwBA,cAAc,CAAEoB,KAAxC;AAA1K,KADM,EAGLjB,YAAY,IAAI,oBAAC,UAAD;AAAY,IAAA,IAAI,EAAE;AAAlB,KAA4BA,YAA5B,CAHX,CAAR;AAKH;;AACD,eAAeP,SAAf","sourcesContent":["import React, { Fragment, useMemo } from 'react';\nimport { StyleSheet } from 'react-native';\nimport { HelperText, TextInput, useTheme } from 'react-native-paper';\nfunction InputText(props) {\n    const { formState, field, textInputProps, CustomTextInput } = props;\n    const theme = useTheme();\n    const errorMessage = formState.errors?.[field.name]?.message;\n    const textColor = errorMessage ? theme.colors.error : theme.colors.text;\n    const INPUT = CustomTextInput ?? TextInput;\n    const styles = useMemo(() => StyleSheet.create({\n        textInputStyle: {\n            color: textColor,\n        },\n    }), [textColor]);\n    return (<Fragment>\n      <INPUT mode={'outlined'} error={errorMessage ? true : false} {...textInputProps} ref={field.ref} value={field.value} onChangeText={(text) => field.onChange(text)} style={[styles.textInputStyle, textInputProps?.style]}/>\n\n      {errorMessage && <HelperText type={'error'}>{errorMessage}</HelperText>}\n    </Fragment>);\n}\nexport default InputText;\n"]},"metadata":{},"sourceType":"module"}