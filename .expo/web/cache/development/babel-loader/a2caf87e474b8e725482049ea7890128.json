{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { Fragment } from 'react';\nimport { useController } from 'react-hook-form';\nimport { TextInput } from 'react-native-paper';\nimport InputAutocomplete from \"../Inputs/InputAutocomplete\";\nimport InputSelect from \"../Inputs/InputSelect\";\nimport InputText from \"../Inputs/InputText\";\n\nfunction Logic(props) {\n  var name = props.name,\n      rules = props.rules,\n      shouldUnregister = props.shouldUnregister,\n      defaultValue = props.defaultValue,\n      control = props.control,\n      type = props.type,\n      textInputProps = props.textInputProps,\n      JSX = props.JSX,\n      options = props.options,\n      CustomAutoComplete = props.CustomAutoComplete,\n      CustomTextInput = props.CustomTextInput,\n      onDismiss = props.onDismiss;\n\n  var _useController = useController({\n    name: name,\n    rules: rules,\n    shouldUnregister: shouldUnregister,\n    defaultValue: defaultValue,\n    control: control\n  }),\n      field = _useController.field,\n      formState = _useController.formState;\n\n  switch (type) {\n    case 'text':\n      {\n        return React.createElement(InputText, {\n          field: field,\n          formState: formState,\n          textInputProps: textInputProps,\n          CustomTextInput: CustomTextInput\n        });\n      }\n\n    case 'email':\n      {\n        return React.createElement(InputText, {\n          field: field,\n          formState: formState,\n          textInputProps: _objectSpread(_objectSpread({}, textInputProps), {}, {\n            keyboardType: 'email-address',\n            autoCapitalize: 'none'\n          }),\n          CustomTextInput: CustomTextInput\n        });\n      }\n\n    case 'password':\n      {\n        return React.createElement(InputText, {\n          field: field,\n          formState: formState,\n          textInputProps: _objectSpread(_objectSpread({}, textInputProps), {}, {\n            secureTextEntry: true\n          }),\n          CustomTextInput: CustomTextInput\n        });\n      }\n\n    case 'select':\n      {\n        return React.createElement(Fragment, null, options && React.createElement(InputSelect, {\n          field: field,\n          formState: formState,\n          textInputProps: _objectSpread(_objectSpread({}, textInputProps), {}, {\n            right: React.createElement(TextInput.Icon, {\n              name: 'menu-down'\n            })\n          }),\n          options: options,\n          CustomTextInput: CustomTextInput,\n          onDismiss: onDismiss\n        }));\n      }\n\n    case 'autocomplete':\n      {\n        return React.createElement(Fragment, null, options && React.createElement(InputAutocomplete, {\n          field: field,\n          formState: formState,\n          textInputProps: _objectSpread(_objectSpread({}, textInputProps), {}, {\n            right: React.createElement(TextInput.Icon, {\n              name: 'menu-down'\n            })\n          }),\n          options: options,\n          CustomAutoComplete: CustomAutoComplete,\n          CustomTextInput: CustomTextInput\n        }));\n      }\n\n    case 'custom':\n      {\n        return JSX && JSX(props);\n      }\n  }\n}\n\nexport default Logic;","map":{"version":3,"sources":["A:/Office Work/maxhypeapp/node_modules/react-native-paper-form-builder/dist/Logic/Logic.js"],"names":["React","Fragment","useController","TextInput","InputAutocomplete","InputSelect","InputText","Logic","props","name","rules","shouldUnregister","defaultValue","control","type","textInputProps","JSX","options","CustomAutoComplete","CustomTextInput","onDismiss","field","formState","keyboardType","autoCapitalize","secureTextEntry","right"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport { useController } from 'react-hook-form';\nimport { TextInput } from 'react-native-paper';\nimport InputAutocomplete from '../Inputs/InputAutocomplete';\nimport InputSelect from '../Inputs/InputSelect';\nimport InputText from '../Inputs/InputText';\nfunction Logic(props) {\n    const { name, rules, shouldUnregister, defaultValue, control, type, textInputProps, JSX, options, CustomAutoComplete, CustomTextInput, onDismiss, } = props;\n    const { field, formState } = useController({\n        name,\n        rules,\n        shouldUnregister,\n        defaultValue,\n        control,\n    });\n    switch (type) {\n        case 'text': {\n            return (<InputText field={field} formState={formState} textInputProps={textInputProps} CustomTextInput={CustomTextInput}/>);\n        }\n        case 'email': {\n            return (<InputText field={field} formState={formState} textInputProps={{\n                    ...textInputProps,\n                    keyboardType: 'email-address',\n                    autoCapitalize: 'none',\n                }} CustomTextInput={CustomTextInput}/>);\n        }\n        case 'password': {\n            return (<InputText field={field} formState={formState} textInputProps={{\n                    ...textInputProps,\n                    secureTextEntry: true,\n                }} CustomTextInput={CustomTextInput}/>);\n        }\n        case 'select': {\n            return (<Fragment>\n          {options && (<InputSelect field={field} formState={formState} textInputProps={{\n                        ...textInputProps,\n                        right: <TextInput.Icon name={'menu-down'}/>,\n                    }} options={options} CustomTextInput={CustomTextInput} onDismiss={onDismiss}/>)}\n        </Fragment>);\n        }\n        case 'autocomplete': {\n            return (<Fragment>\n          {options && (<InputAutocomplete field={field} formState={formState} textInputProps={{\n                        ...textInputProps,\n                        right: <TextInput.Icon name={'menu-down'}/>,\n                    }} options={options} CustomAutoComplete={CustomAutoComplete} CustomTextInput={CustomTextInput}/>)}\n        </Fragment>);\n        }\n        case 'custom': {\n            return JSX && JSX(props);\n        }\n    }\n}\nexport default Logic;\n"]},"metadata":{},"sourceType":"module"}