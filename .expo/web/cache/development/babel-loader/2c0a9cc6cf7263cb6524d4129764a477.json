{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { Fragment, useMemo, useState } from 'react';\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { TouchableRipple, useTheme, TextInput, HelperText } from 'react-native-paper';\nimport AutoComplete from \"../Components/AutoComplete\";\n\nfunction InputAutocomplete(props) {\n  var _formState$errors, _formState$errors$fie, _options$find;\n\n  var formState = props.formState,\n      field = props.field,\n      textInputProps = props.textInputProps,\n      options = props.options,\n      CustomAutoComplete = props.CustomAutoComplete,\n      CustomTextInput = props.CustomTextInput;\n  var theme = useTheme();\n  var errorMessage = (_formState$errors = formState.errors) == null ? void 0 : (_formState$errors$fie = _formState$errors[field.name]) == null ? void 0 : _formState$errors$fie.message;\n  var textColor = errorMessage ? theme.colors.error : theme.colors.text;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      visible = _useState2[0],\n      setVisible = _useState2[1];\n\n  var AUTOCOMPLETE = CustomAutoComplete != null ? CustomAutoComplete : AutoComplete;\n  var INPUT = CustomTextInput != null ? CustomTextInput : TextInput;\n  var styles = useMemo(function () {\n    return StyleSheet.create({\n      textInputStyle: {\n        color: textColor\n      }\n    });\n  }, [textColor]);\n  return React.createElement(Fragment, null, React.createElement(TouchableRipple, {\n    onPress: function onPress() {\n      Keyboard.dismiss();\n      setVisible(true);\n    }\n  }, React.createElement(View, {\n    pointerEvents: 'none'\n  }, React.createElement(INPUT, _extends({\n    ref: field.ref,\n    mode: 'outlined',\n    error: errorMessage ? true : false,\n    onFocus: function onFocus() {\n      Keyboard.dismiss();\n      setVisible(true);\n    }\n  }, textInputProps, {\n    value: (_options$find = options.find(function (_ref) {\n      var value = _ref.value;\n      return \"\" + value === \"\" + field.value;\n    })) == null ? void 0 : _options$find.label,\n    style: [styles.textInputStyle, textInputProps == null ? void 0 : textInputProps.style]\n  })))), React.createElement(AUTOCOMPLETE, {\n    visible: visible,\n    setVisible: setVisible,\n    options: options,\n    field: field,\n    textInputProps: textInputProps\n  }), errorMessage && React.createElement(HelperText, {\n    type: 'error'\n  }, errorMessage));\n}\n\nexport default InputAutocomplete;","map":{"version":3,"sources":["A:/Office Work/maxhypeapp/node_modules/react-native-paper-form-builder/dist/Inputs/InputAutocomplete.js"],"names":["React","Fragment","useMemo","useState","TouchableRipple","useTheme","TextInput","HelperText","AutoComplete","InputAutocomplete","props","formState","field","textInputProps","options","CustomAutoComplete","CustomTextInput","theme","errorMessage","errors","name","message","textColor","colors","error","text","visible","setVisible","AUTOCOMPLETE","INPUT","styles","StyleSheet","create","textInputStyle","color","Keyboard","dismiss","ref","find","value","label","style"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,OAA1B,EAAmCC,QAAnC,QAAmD,OAAnD;;;;AAEA,SAASC,eAAT,EAA0BC,QAA1B,EAAoCC,SAApC,EAA+CC,UAA/C,QAAkE,oBAAlE;AACA,OAAOC,YAAP;;AACA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAAA;;AAC9B,MAAQC,SAAR,GAA4FD,KAA5F,CAAQC,SAAR;AAAA,MAAmBC,KAAnB,GAA4FF,KAA5F,CAAmBE,KAAnB;AAAA,MAA0BC,cAA1B,GAA4FH,KAA5F,CAA0BG,cAA1B;AAAA,MAA0CC,OAA1C,GAA4FJ,KAA5F,CAA0CI,OAA1C;AAAA,MAAmDC,kBAAnD,GAA4FL,KAA5F,CAAmDK,kBAAnD;AAAA,MAAuEC,eAAvE,GAA4FN,KAA5F,CAAuEM,eAAvE;AACA,MAAMC,KAAK,GAAGZ,QAAQ,EAAtB;AACA,MAAMa,YAAY,wBAAGP,SAAS,CAACQ,MAAb,8CAAG,kBAAmBP,KAAK,CAACQ,IAAzB,CAAH,qBAAG,sBAAgCC,OAArD;AACA,MAAMC,SAAS,GAAGJ,YAAY,GAAGD,KAAK,CAACM,MAAN,CAAaC,KAAhB,GAAwBP,KAAK,CAACM,MAAN,CAAaE,IAAnE;;AACA,kBAA8BtB,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOuB,OAAP;AAAA,MAAgBC,UAAhB;;AACA,MAAMC,YAAY,GAAGb,kBAAH,WAAGA,kBAAH,GAAyBP,YAA3C;AACA,MAAMqB,KAAK,GAAGb,eAAH,WAAGA,eAAH,GAAsBV,SAAjC;AACA,MAAMwB,MAAM,GAAG5B,OAAO,CAAC;AAAA,WAAM6B,UAAU,CAACC,MAAX,CAAkB;AAC3CC,MAAAA,cAAc,EAAE;AACZC,QAAAA,KAAK,EAAEZ;AADK;AAD2B,KAAlB,CAAN;AAAA,GAAD,EAIlB,CAACA,SAAD,CAJkB,CAAtB;AAKA,SAAQ,oBAAC,QAAD,QACN,oBAAC,eAAD;AAAiB,IAAA,OAAO,EAAE,mBAAM;AAC1Ba,MAAAA,QAAQ,CAACC,OAAT;AACAT,MAAAA,UAAU,CAAC,IAAD,CAAV;AACH;AAHH,KAIE,oBAAC,IAAD;AAAM,IAAA,aAAa,EAAE;AAArB,KACE,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAEf,KAAK,CAACyB,GAAlB;AAAuB,IAAA,IAAI,EAAE,UAA7B;AAAyC,IAAA,KAAK,EAAEnB,YAAY,GAAG,IAAH,GAAU,KAAtE;AAA6E,IAAA,OAAO,EAAE,mBAAM;AAC1FiB,MAAAA,QAAQ,CAACC,OAAT;AACAT,MAAAA,UAAU,CAAC,IAAD,CAAV;AACH;AAHC,KAGKd,cAHL;AAGqB,IAAA,KAAK,mBAAEC,OAAO,CAACwB,IAAR,CAAa;AAAA,UAAGC,KAAH,QAAGA,KAAH;AAAA,aAAe,KAAGA,KAAH,UAAkB3B,KAAK,CAAC2B,KAAvC;AAAA,KAAb,CAAF,qBAAE,cAA8DC,KAH1F;AAGiG,IAAA,KAAK,EAAE,CAACV,MAAM,CAACG,cAAR,EAAwBpB,cAAxB,oBAAwBA,cAAc,CAAE4B,KAAxC;AAHxG,KADF,CAJF,CADM,EAYN,oBAAC,YAAD;AAAc,IAAA,OAAO,EAAEf,OAAvB;AAAgC,IAAA,UAAU,EAAEC,UAA5C;AAAwD,IAAA,OAAO,EAAEb,OAAjE;AAA0E,IAAA,KAAK,EAAEF,KAAjF;AAAwF,IAAA,cAAc,EAAEC;AAAxG,IAZM,EAaLK,YAAY,IAAI,oBAAC,UAAD;AAAY,IAAA,IAAI,EAAE;AAAlB,KAA4BA,YAA5B,CAbX,CAAR;AAeH;;AACD,eAAeT,iBAAf","sourcesContent":["import React, { Fragment, useMemo, useState } from 'react';\nimport { Keyboard, StyleSheet, View } from 'react-native';\nimport { TouchableRipple, useTheme, TextInput, HelperText, } from 'react-native-paper';\nimport AutoComplete from '../Components/AutoComplete';\nfunction InputAutocomplete(props) {\n    const { formState, field, textInputProps, options, CustomAutoComplete, CustomTextInput, } = props;\n    const theme = useTheme();\n    const errorMessage = formState.errors?.[field.name]?.message;\n    const textColor = errorMessage ? theme.colors.error : theme.colors.text;\n    const [visible, setVisible] = useState(false);\n    const AUTOCOMPLETE = CustomAutoComplete ?? AutoComplete;\n    const INPUT = CustomTextInput ?? TextInput;\n    const styles = useMemo(() => StyleSheet.create({\n        textInputStyle: {\n            color: textColor,\n        },\n    }), [textColor]);\n    return (<Fragment>\n      <TouchableRipple onPress={() => {\n            Keyboard.dismiss();\n            setVisible(true);\n        }}>\n        <View pointerEvents={'none'}>\n          <INPUT ref={field.ref} mode={'outlined'} error={errorMessage ? true : false} onFocus={() => {\n            Keyboard.dismiss();\n            setVisible(true);\n        }} {...textInputProps} value={options.find(({ value }) => `${value}` === `${field.value}`)?.label} style={[styles.textInputStyle, textInputProps?.style]}/>\n        </View>\n      </TouchableRipple>\n      <AUTOCOMPLETE visible={visible} setVisible={setVisible} options={options} field={field} textInputProps={textInputProps}/>\n      {errorMessage && <HelperText type={'error'}>{errorMessage}</HelperText>}\n    </Fragment>);\n}\nexport default InputAutocomplete;\n"]},"metadata":{},"sourceType":"module"}