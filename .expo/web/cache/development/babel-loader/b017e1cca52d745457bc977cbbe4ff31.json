{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { FormBuilder } from 'react-native-paper-form-builder';\nimport { useForm } from 'react-hook-form';\nimport { Button, TextInput } from 'react-native-paper';\nimport Axios from 'axios';\nexport default function Contact() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      name = _useState4[0],\n      setName = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      message = _useState6[0],\n      setMessage = _useState6[1];\n\n  var _useForm = useForm({\n    defaultValues: {\n      email: '',\n      name: '',\n      phone: ''\n    },\n    mode: 'onChange'\n  }),\n      control = _useForm.control,\n      setFocus = _useForm.setFocus,\n      handleSubmit = _useForm.handleSubmit,\n      reset = _useForm.reset;\n\n  var formSubmit = function formSubmit(data) {\n    var response;\n    return _regeneratorRuntime.async(function formSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log('form data', _objectSpread(_objectSpread({}, data), {}, {\n              message: message\n            }));\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(Axios.post(\"https://themaxhype.com/api/savecontact\", data));\n\n          case 4:\n            response = _context.sent;\n            console.log(response.data);\n            reset({});\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](1);\n            console.error(_context.t0);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 9]], Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.scrollViewStyle\n  }, React.createElement(Text, {\n    style: {\n      fontSize: 16,\n      fontWeight: '700'\n    }\n  }, \" Contact Screen \"), React.createElement(ScrollView, null, React.createElement(FormBuilder, {\n    control: control,\n    setFocus: setFocus,\n    formConfigArray: [{\n      type: 'email',\n      name: 'email',\n      rules: {\n        required: {\n          value: true,\n          message: 'Email is required'\n        }\n      },\n      textInputProps: {\n        label: 'Email'\n      }\n    }, {\n      type: 'text',\n      name: 'name',\n      rules: {\n        required: {\n          value: true,\n          message: 'fullname is required'\n        }\n      },\n      textInputProps: {\n        label: 'Full Name'\n      }\n    }, {\n      type: 'text',\n      name: 'phone',\n      rules: {\n        required: {\n          value: true,\n          message: 'phone is required'\n        }\n      },\n      textInputProps: {\n        label: 'phone'\n      }\n    }]\n  }), React.createElement(TextInput, {\n    style: styles.textArea,\n    onChangeText: function onChangeText(text) {\n      return setMessage(text);\n    },\n    placeholder: \"Type Message\",\n    multiline: true\n  }), React.createElement(Button, {\n    mode: 'contained',\n    onPress: handleSubmit(formSubmit)\n  }, \"Submit\")));\n}\nvar styles = StyleSheet.create({\n  containerStyle: {\n    flex: 1\n  },\n  scrollViewStyle: {\n    flex: 1,\n    padding: 15,\n    justifyContent: 'center'\n  },\n  headingStyle: {\n    fontSize: 30,\n    textAlign: 'center',\n    marginBottom: 40\n  },\n  textArea: {\n    height: 100,\n    justifyContent: 'flex-start',\n    textAlignVertical: 'top'\n  }\n});","map":{"version":3,"sources":["A:/Office Work/maxhype/maxhypeapp/components/contact/index.js"],"names":["React","useState","FormBuilder","useForm","Button","TextInput","Axios","Contact","email","setEmail","name","setName","message","setMessage","defaultValues","phone","mode","control","setFocus","handleSubmit","reset","formSubmit","data","console","log","post","response","error","styles","scrollViewStyle","fontSize","fontWeight","type","rules","required","value","textInputProps","label","textArea","text","StyleSheet","create","containerStyle","flex","padding","justifyContent","headingStyle","textAlign","marginBottom","height","textAlignVertical"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { View, StyleSheet, ScrollView, Text } from 'react-native';\r\nimport { FormBuilder } from 'react-native-paper-form-builder';\r\nimport { useForm } from 'react-hook-form';\r\nimport { Button, TextInput } from 'react-native-paper';\r\nimport Axios from 'axios';\r\n\r\nexport default function Contact() {\r\n  const [email, setEmail] = useState();\r\n  const [name, setName] = useState();\r\n  const [message, setMessage] = useState();\r\n  const { control, setFocus, handleSubmit, reset } = useForm({\r\n    defaultValues: {\r\n      email: '',\r\n      name: '',\r\n      phone: '',\r\n    },\r\n    mode: 'onChange',\r\n  });\r\n  const formSubmit = async (data) => {\r\n    console.log('form data', { ...data, message: message });\r\n    try {\r\n      const response = await Axios.post(\r\n        `https://themaxhype.com/api/savecontact`,\r\n        data\r\n      );\r\n      console.log(response.data);\r\n      reset({});\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n  return (\r\n    <View style={styles.scrollViewStyle}>\r\n      <Text style={{ fontSize: 16, fontWeight: '700' }}> Contact Screen </Text>\r\n      <ScrollView>\r\n        <FormBuilder\r\n          control={control}\r\n          setFocus={setFocus}\r\n          formConfigArray={[\r\n            {\r\n              type: 'email',\r\n              name: 'email',\r\n\r\n              rules: {\r\n                required: {\r\n                  value: true,\r\n                  message: 'Email is required',\r\n                },\r\n              },\r\n              textInputProps: {\r\n                label: 'Email',\r\n              },\r\n            },\r\n            {\r\n              type: 'text',\r\n              name: 'name',\r\n              rules: {\r\n                required: {\r\n                  value: true,\r\n                  message: 'fullname is required',\r\n                },\r\n              },\r\n              textInputProps: {\r\n                label: 'Full Name',\r\n              },\r\n            },\r\n            {\r\n              type: 'text',\r\n              name: 'phone',\r\n              rules: {\r\n                required: {\r\n                  value: true,\r\n                  message: 'phone is required',\r\n                },\r\n              },\r\n              textInputProps: {\r\n                label: 'phone',\r\n              },\r\n            },\r\n          ]}\r\n        />\r\n        <TextInput\r\n          style={styles.textArea}\r\n          onChangeText={(text) => setMessage(text)}\r\n          placeholder='Type Message'\r\n          multiline={true}\r\n        />\r\n        <Button mode={'contained'} onPress={handleSubmit(formSubmit)}>\r\n          Submit\r\n        </Button>\r\n      </ScrollView>\r\n    </View>\r\n  );\r\n}\r\nconst styles = StyleSheet.create({\r\n  containerStyle: {\r\n    flex: 1,\r\n  },\r\n  scrollViewStyle: {\r\n    flex: 1,\r\n    padding: 15,\r\n    justifyContent: 'center',\r\n  },\r\n  headingStyle: {\r\n    fontSize: 30,\r\n    textAlign: 'center',\r\n    marginBottom: 40,\r\n  },\r\n  textArea: {\r\n    height: 100,\r\n    justifyContent: 'flex-start',\r\n    textAlignVertical: 'top',\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}